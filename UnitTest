node {
git "https://" + token + "@github.com/Motchart/UnitTestsTeam_B.git" 
def mvnHome = tool 'Maven_3.5.0'
def emailList = 'motchart007@gmail.com';
)}
try {
	currentBuild.result = "SUCCESS"
	stage('site') {sh "'${mvnHome}/bin/mvn' clean site"publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '\\target\\site', reportFiles: 'surefire-report.html', reportName: 'Surefire Report', reportTitles: ''])
publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '\\target\\site', reportFiles: 'allure-maven-plugin.html', reportName: 'Allure Report', reportTitles: ''])}
	emailNotify(emailList)
stage('Test') {step([$class: 'Publisher', testResults: '**/testng-results.xml']
			
}catch (e) {
	currentBuild.result = "FAILURE"
	emailNotify(emailList)
	}
}
def emailNotify (emailList) {
if ('SUCCESS'.equals(currentBuild.result.toString())) {
emailext(
	  subject: "PASSED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
	  body:  "PASSED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':".toString() 		+ "\nCheck console output at ${env.BUILD_URL}console".toString(),		to: emailList)
if ('FAILED'.equals(currentBuild.result.toString())) {
emailext(
          subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
          body:  "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':".toString()
              + "\nCheck console output at ${env.BUILD_URL}console".toString(),               to: emailList)
	}
}
}
